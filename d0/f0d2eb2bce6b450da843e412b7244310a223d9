From: jtimon@jtimon.cc (=?UTF-8?B?Sm9yZ2UgVGltw7Nu?=)
Date: Sun, 28 Jun 2015 17:51:54 +0200
Subject: [bitcoin-dev] Original Vision
In-Reply-To: <CAOG=w-vQ+bCyT8mLNBvLDhhQzCHXxaRos-3VFDGkCsxvCiX3jA@mail.gmail.com>
References: <1164261435450448@web14h.yandex.ru> <558F583C.1000500@gmail.com>
	<2A94BDF7-F265-4D36-B438-DC4F432E1C67@gmail.com>
	<558F8634.90904@gmail.com>
	<38C2E2A1-EB6C-48EB-8FA1-7FAA97B3E911@gmail.com>
	<CAOG=w-vQ+bCyT8mLNBvLDhhQzCHXxaRos-3VFDGkCsxvCiX3jA@mail.gmail.com>
Message-ID: <CABm2gDq31doL62a2HwY8kSuB1zPMhz6OPR0Qa9X7thbZBdNTOQ@mail.gmail.com>

On Sun, Jun 28, 2015 at 5:23 PM, Mark Friedenbach <mark at friedenbach.org> wrote:
> UTXO commitments are the nominal solution here. You commit the validator state in each block, and then you can prove things like a negative by referencing that state commitment. The trouble is this requires maintaining a hash tree commitment over validator state, which turns out to be insanely expensive. With the UTXO commitment scheme (the others are not better) that ends up requiring 15 - 22x more I/O during block validation. And I/O is presently a limiter to block validation speed. So if you thought 8MB was what bitcoin today could handle, and you also want this commitment scheme for fraud proofs, then you should be arguing for a block size limit decrease (to 500kB), not increase.

What about a TXO and a STXO O(1)-append commitment? That shouldn't
cause that much overhead and you can build UTXO from TXO - STXO.
I know it's not so efficient in some respects but it scales better I think.
