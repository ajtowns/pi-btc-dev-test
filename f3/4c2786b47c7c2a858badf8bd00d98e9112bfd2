From: luke@dashjr.org (Luke-Jr)
Date: Tue, 17 Dec 2013 22:50:24 +0000
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
	forked chains
In-Reply-To: <20131217224130.GC3180@nl.grid.coop>
References: <20131217224130.GC3180@nl.grid.coop>
Message-ID: <201312172250.24887.luke@dashjr.org>

On Tuesday, December 17, 2013 10:41:30 PM Troy Benjegerdes wrote:
> I want to get some feedback.. I've used distributed version control
> systems for a long time, and the most useful feature is to be able
> to merge two different forks.
> 
> So what's the equivalent of this for Bitcoin or other crypto-currencies?
> 
> Let's suppose that me and my friends get 'islanded' from the rest of
> the internet for a week, but we still want to trade bitcoin. It would
> work if there are local miners, until we reconnect.
> 
> Suppose we have the main chain (Alice), while bob is on a boat, trading
> with some friends, but has no network connectivity.
> 
> When bob reconnects with Alice, a 'Merge' transaction happens where a
> miner looks at bob's forked blockchain, sees no double-spends, and
> includes BOTH chains.
> 
> Now suppose someone on bob's boat has a buggy client, or sent a
> transaction before disconnect that results in a double-spend on the
> merge.
> 
> So we have a merge conflict, which generally requires human interaction,
> so bob and his friends broadcast a MERGE request with a transaction fee
> sufficient to cover reconciling the double-spends, AND incentivize a
> miner to do some extra work to merge.
> 
> Thoughts everyone?

This is interesting, but I'm not sure it has the right incentives. First, it 
adds more reason for miners to *avoid* including transactions (they might turn 
out to be double-spends and make merging costly). Second, it gives people 
reason to double-spend (the miner might cover the cost of it). Finally, you 
don't appear to address how to deal with the subsidy - do both miners get it?

Luke


