From: hozer@hozed.org (Troy Benjegerdes)
Date: Wed, 18 Dec 2013 00:03:53 -0600
Subject: [Bitcoin-development] RFC: MERGE transaction/script/process for
 forked chains
In-Reply-To: <CAAS2fgT5S8x6njU6Le9tNwR_QWnoSGzfK38VLgnFfR=p=+t72g@mail.gmail.com>
References: <20131217224130.GC3180@nl.grid.coop>
	<CAAS2fgT5S8x6njU6Le9tNwR_QWnoSGzfK38VLgnFfR=p=+t72g@mail.gmail.com>
Message-ID: <20131218060353.GD3180@nl.grid.coop>

On Tue, Dec 17, 2013 at 02:48:14PM -0800, Gregory Maxwell wrote:
> On Tue, Dec 17, 2013 at 2:41 PM, Troy Benjegerdes <hozer at hozed.org> wrote:
> > I want to get some feedback.. I've used distributed version control
> > systems for a long time, and the most useful feature is to be able
> > to merge two different forks.
> 
> We already automatically merge forks that we become aware of simply by
> pulling in all the novel non-conflicting transactions the fork
> contains and including them in our next blocks.

Now maybe this is a fatal flaw with Bitcoin's hard upper limit for number
of coins, but any miners that with good faith tried to support an islanded
bitcoin network now have generate transactions that get clobbered when
the network reconnects.

I can imagine a way to do this with some freicoin-like demurrage, which
would only impact new coinbase based on the percentage of the hashing
power that was on the other side of the fork. So if you are with the
95% of hashing power, you keep 95% of the new coins when the other 5%
shows back up from being islanded.

And this is also way more complicated than what I had first imagined
to do securely and reliably.


