From: elombrozo@gmail.com (Eric Lombrozo)
Date: Mon, 3 Aug 2015 10:54:12 -0700
Subject: [bitcoin-dev] Incentivising full nodes by having SPV nodes to
 pay for data requests
In-Reply-To: <55BFA507.9050902@voskuil.org>
References: <BLU172-W18766B61EF807ACC5F3DBCC2770@phx.gbl>
	<BLU172-W348AAB2648B8D7D323A68DC2770@phx.gbl>
	<55BFA507.9050902@voskuil.org>
Message-ID: <CABr1YTcX3-PFOkEos9xGxTRM6TRP-kM0GhmRaNf1BQ_gfmbViA@mail.gmail.com>

The point is that without concrete direct incentives, many might find it
rational to just leech off others...which might actually work for a
while...but this is obviously not stable equilibrium...and it's very hard
to do any game theory on it.

Current SPV implementations necessarily diverge from the p2p model and
strongly tend toward a client/server architecture. It was originally
thought that mining would provide an incentive to run servers...but we all
know that's not at all how things have turned out.

Using offchain protocols with blockchain settlement guarantees, it is
possible for clients to request proofs directly from servers without
requiring any additional authentication layers...and can perhaps even be
onion-routed to hide the client's identity.

Checking SPV proofs is cheap...it only requires downloading headers,
checking PoW, and constructing a lookup table mapping block hashes to
merkle roots. This structure can easily be stored entirely in RAM on
typical consumer devices (it's at most 80 bytes per block, or a little over
30MB right now and grows at a very manageable rate). The most expensive
step to prove inclusion of a specific transaction in the blockchain is then
O(log n) sha256 operations, where n is the number of transactions in the
block.

Using p2sh, we ensure the txout script is a mere 22 bytes. Full validation
nodes can fully prune the partial merkle tree structure when the output is
spent. SPV proof serving nodes would still need to store full blocks...but
as long as they are getting paid for this market forces could lead to a
stable balance between clients and servers...or at least adaptive dynamics
that prevent deficits or surpluses.

If I screwed something up in this analysis someone please correct me.

- Eric
On Aug 3, 2015 10:29 AM, "Eric Voskuil via bitcoin-dev" <
bitcoin-dev at lists.linuxfoundation.org> wrote:

> The typical interpretation of the "tragedy of the commons" scenario is
> based on the presumption that a limited resource is controlled by the
> state.
>
> In a free market there is no such idea, a limited resource becomes
> property and is therefore allocated by customer preference and
> maintained by self-interest.
>
> Validation is not a resource controlled by the state, which is of course
> the point of Bitcoin.
>
> It is inaccurate to think of Bitcoin validation a limited resource. The
> scenario in which fewer people validate does not reduce the amount of
> validation available. It increases the risk of loss to those who fail to
> validate. The gain to those who do validate comes from avoiding that loss.
>
> e
>
>
> On 08/03/2015 10:06 AM, Luv Khemani via bitcoin-dev wrote:
> > The current block size debate has brought up an important, albeit often
> > neglected observation. Full nodes suffer from a tragedy of the commons
> > problem and therefore are likely to continue decreasing as a percentage
> > of total Bitcoin nodes. This also results in a vicious circle as more
> > and more people use SPVs, the burden on existing full nodes will
> > increase even without a block size increase, which will further reduce
> > the number of full nodes . A few people have mentioned it in blogs or
> > reddit, but the topic is generally quickly overshadowed by posts along
> > the lines of  "RAISE the blocksize already!".
> >
> > Full nodes bear the full cost of validating/relaying/storing the
> > blockchain and servicing SPV clients but gain nothing financially from
> > it, yet they serve an important role in validating transactions and
> > keeping miner dishonesty in check. If there were few independent full
> > nodes, it would be possible for 3-4 of the biggest mining pools to
> > collude and do literally whatever they wanted with the protocol,
> > including inflating the money supply, freezing funds or even
> > confiscating funds, because who would know? And even if someone running
> > a full node did voice out, the majority of users on SPV/Coinbase/etc..
> > would be powerless to do anything about it and would likely bear with
> > the changes to protect status quo, just as is the case with current fiat
> > regimes where people bear with QE/Inflation/bail outs because they are
> > so dependent on the current system that they would rather tolerate any
> > injustice than to have the system go down and bring them with it.
> > This is the primary reason why many in the technical community are
> > against drastic blocksize increases, as this will only worsen the
> > problem of decentralization as this cost increases. And as long as full
> > nodes are running on charity, i'm fully in agreement with the
> > conservative block size camp.
> >
> > However, it is important to note that this seems to be an economic
> > problem instead of a technical one. I cannot deny the argument from the
> > big block side that technically, the hardware/bandwidth required to run
> > full nodes supporting considerably larger blocks (4MB-8MB) is not out of
> > reach of many individuals around the globe. The core issue in my opinion
> > is that of incentive, because at the end of the day, running a full node
> > is not free and at larger blocks costs will not be trivial. In my
> > opinion, its perhaps our insistence that full nodes cant be incentivised
> > that contributes to centralization pressures and discourages increasing
> > of blocksize even though the technology exists to support it.
> >
> > Technically, existing hardware is capable of validating/processing
> > blocks in the region of an order of magnitude larger than the current
> > limit. Bandwidth requirements for running a validating full node are
> > also not very high if you are not mining, as you can afford to wait a
> > couple of minutes to download your block. This is obviously not the case
> > for miners who need to download new blocks asap to avoid idle hash power
> > or as has been seen in the recent fork, SPV mining (which is extremely
> > undesirable for the network). IBLT should help greatly in reducing the
> > propagation time of new blocks and ease peak bandwidth requirements. But
> > im not worried about the miners, they are after all being financially
> > compensated for what they are doing and investing in more
> > bandwidth(either locally or running a full node remotely) can be seen as
> > a cost of the business as long as the cost of running a full node is
> > insignificant to the cost of hashing equipment to keep barriers to
> > mining low.
> >
> > Before the concept lightning, there did not seem to be any trustless way
> > of feasibly paying small micropayments to full nodes for their services.
> > However, with payment channels and lightning, this may no longer be an
> > issue. A node could advertise it's rates to a SPV nodes upon connection
> > and the SPV could either agree or look for another node with lower fees.
> > If implemented, fees are likely to be trivial(few satoshis per request)
> > as competition will drive down fees close to the cost of running a full
> > node. This should spur an increase in the number of full nodes and
> > increase decentralization of the network.
> >
> > I just wanted to float the idea and hear comments/feedback/critiques of
> > this idea.
> >
> >
> > _______________________________________________
> > bitcoin-dev mailing list
> > bitcoin-dev at lists.linuxfoundation.org
> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
> >
>
>
> _______________________________________________
> bitcoin-dev mailing list
> bitcoin-dev at lists.linuxfoundation.org
> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150803/74134e24/attachment.html>
