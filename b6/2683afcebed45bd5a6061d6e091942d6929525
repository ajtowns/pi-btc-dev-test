From: robert.brautigam@netmind.hu (=?ISO-8859-1?Q?Brautigam_R=F3bert?=)
Date: Sun, 22 Jan 2012 14:18:35 +0100
Subject: [Bitcoin-development] ECC Signature Issue
Message-ID: <4F1C0CAB.4000905@netmind.hu>

Hi all,

I'm working on a from scratch Java implementation. So far I got a 
modularized, unit tested implementation of the core modules (api, keys, 
blocks, chain, scripts, network protocol).

My dummy client however gets stuck on Block 140493, specifically at 
transaction hash: 
70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d

It seems the (signature) verification fails for this specific 
transaction (for the 1 input in it), which is rather odd since 
verification was successful for all the preceding blocks and inputs.

I double checked that the official (C++) client is indeed successful 
here. Oddly enough the bitcoinj implementation also seems to fail to 
verify this transaction, which seems to point in the direction of 
BouncyCastle (which we both use).

My question is, did anybody hit this issue before? If not, can someone 
doublecheck maybe that I'm not missing something trivial?

The data that should be signed (the signature hash):
b45c680f32f9364f5255cc15ef7cad879dbde9062d7fb8db0fe56e245823a78f

The signature (with '01' at the end for SIGHASH_ALL, remove this before 
you pass it to verification): 
304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a3201

The public key:
04f25ec495fa21ad14d69f45bf277129488cfb1a339aba1fed3c5099bb6d8e9716491a14050fbc0b2fed2963dc1e56264b3adf52a81b953222a2180d48b54d1e18

As said, this seems to work with openssl, but seems to fail with 
bouncycastle for some reason (version 140).

Thanks,
Robert.



