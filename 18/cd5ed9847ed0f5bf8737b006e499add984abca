From: bip@mattwhitlock.name (Matt Whitlock)
Date: Fri, 27 Mar 2015 12:08:40 -0400
Subject: [Bitcoin-development] "network disruption as a service" and
	proof of local storage
In-Reply-To: <20150327155730.GB20754@amethyst.visucore.com>
References: <55034205.4030607@localhost.local> <2210650.iUsfZECcCc@crushinator>
	<20150327155730.GB20754@amethyst.visucore.com>
Message-ID: <1476737.qrsdQayLJV@crushinator>

On Friday, 27 March 2015, at 4:57 pm, Wladimir J. van der Laan wrote:
> On Fri, Mar 27, 2015 at 11:16:43AM -0400, Matt Whitlock wrote:
> > I agree that someone could do this, but why is that a problem? Isn't the goal of this exercise to ensure more full nodes on the network? In order to be able to answer the challenges, an entity would need to be running a full node somewhere. Thus, they have contributed at least one additional full node to the network. I could certainly see a case for a company to host hundreds of lightweight (e.g., EC2) servers all backed by a single copy of the block chain. Why force every single machine to have its own copy? All you really need to require is that each agency/participant have its own copy.
> 
> They would not even have to run one. It could just pass the query to a random other node, and forward its result :)

Ah, easy way to fix that. In fact, in my first draft of my suggestion, I had the answer, but I removed it because I thought it was superfluous.

Challenge:
"Send me: SHA256(SHA256(concatenation of N pseudo-randomly selected bytes from the block chain | prover's nonce | verifier's nonce))."

The nonces are from the "version" messages exchanged at connection startup. A node can't pass the buck because it can't control the nonce that a random other node chooses.


