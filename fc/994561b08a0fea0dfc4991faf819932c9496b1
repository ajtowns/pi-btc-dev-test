From: john.dillon892@googlemail.com (John Dillon)
Date: Thu, 9 May 2013 02:33:11 +0000
Subject: [Bitcoin-development] 32 vs 64-bit timestamp fields
In-Reply-To: <20130509015731.GA26423@savin>
References: <CAA3bHnwWHAmvF3vWwakJXKBt9y6b1u0cc7j4AbQBCOy-h3a1XA@mail.gmail.com>
	<20130508234422.GA30870@savin>
	<CAPaL=UVNSM1W-vDt_kWUprMCt_LVTHfdiUkf0Aem1FAoD+4Qxw@mail.gmail.com>
	<CA+8xBpf-A7z8ffbLjoRRuK56KHJ4xHUyNSca5yOJHx6tQB=T7A@mail.gmail.com>
	<20130509011338.GA8708@vps7135.xlshosting.net>
	<CAPaL=UW_uvMpLx2sv4o3yONcAnY8xwLQWT2Act6por7CdHBJNw@mail.gmail.com>
	<20130509015731.GA26423@savin>
Message-ID: <CAPaL=UWBrc8VfHvmmKHoDH_D9G5_nPir8sLdYYF4ybsz3STD0A@mail.gmail.com>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

On Thu, May 9, 2013 at 1:57 AM, Peter Todd <pete at petertodd.org> wrote:
> Remember that interpreting the timestamp on a block for the purposes of
> timestamping is a lot more subtle than it appears at first.

I actually just meant how Pieter Wuille was talking about a blocktime accurate
to only within 18 hours. :) But it is a nice writeup!

In any case, for many things simple relative ordering is enough rather than
absolute time.

> There are two types of timestamps possible: proofs that data existed
> before a time, and proofs that data existed after. With the former type
> the *later* the proof says the data existed, the more conservative the
> assumptions behind the proof. So simply adding two hours to the block's
> timestamp is relatively reasonable. (this assumes the attack managed to
> mine a single block, and all nodes have accurate clocks)

Nope. The attacker can make the timestamp on the block they mine as little as
the minimum from GetMedianTimePast(), and adding two hours to that number could
easily be well before true time.

What you probably need to do is some sort of median time calculation for the
blocks around your timestamp. The proof becomes probabalistic based on the % of
hashing power the attacker controls and in turn depends on if the time they
created their timestamp was of their own choosing.

IE, if you just want to create an inaccurate timestamp, but don't care when,
you can just mine blocks and wait until you get lucky. If you need to create an
inaccurate timestamp *now* the problem is much harder.

But all this analysis can be developed later, and data timestamped now. :)

> Back to the block header time... Frankly, the easiest thing to do is
> just have a flag day where blocks after a certain height are considered
> to have a different epoch from the standard 1970 one when computing
> their time. Boring, but it works fine and only needs to be updated every
> few decades.

Oh, right, yes, that is a much more simple idea and far less prone to bugs.

Many SPV clients wouldn't even need upgrades if they don't acturally validate
the blocks they receive and just look for the biggest PoW.

>
> You're midstate idea is very clever though and could come in handy in
> the future for different purposes. Eventually we should discuss this
> with the ASIC manufacturers - if it can be implemented as a firmware or
> FPGA upgrade in the field all the better.

Yes


Anyway, you are being distracted from what we were talking about before, get
back to work!
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.11 (GNU/Linux)

iQEcBAEBCAAGBQJRiwrGAAoJEEWCsU4mNhiPvYAH/3kjlg5diWeyYUJlKPKRpygQ
XAU8a2D3h9bABacmmhx5yW3AmtV0QqLgKlB76t41JB4O6Jer5FT8tBBwPnjDijtI
KrBWwPqNhVZiyTSDZQTF6BR1a0DDCZVtOXlpOTj6NL1+hy7NYTYsqxAVzS8QgZUH
RXt7QTYGrrmMbmm75NdWhK59mbv22UEaDHfDW0qqgSzdb7f1EQv1fou3MfKScQSd
7OsGU3k5PM+KQ/FGBy+r+07GY5yj85YMooGky0MCjtkOiU/qr+pxfs1uT2R8/512
TyZxzn1vtgWUEGOUeMCml+bgjUOvOgcIvAarzZmyLyAAY15S/LT8MvAr2RUjAfY=
=UDyE
-----END PGP SIGNATURE-----


