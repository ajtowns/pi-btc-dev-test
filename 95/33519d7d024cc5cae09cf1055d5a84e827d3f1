From: paul@realfoot.com (Paul Goldstein)
Date: Mon, 16 Jun 2014 11:41:34 -0400
Subject: [Bitcoin-development] instant confirmation via payment protocol
 backwards compatible proto buffer extension
In-Reply-To: <CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
References: <CAKrJrGOBSiY5V59eko6g796j3wh9V9ZLjPbyHeS5=zyX6j3Wdw@mail.gmail.com>
	<CANEZrP0Euc1mPhRc9e41tU4zMDrWesvVyiBpAPq6M3m7K=aU=A@mail.gmail.com>
	<CAFDyEXgKpbE4WGAqROJ4J1UST=tXWgfn7uKhRO_tngJfVK_Czw@mail.gmail.com>
Message-ID: <CADE3-jA8LizD8cjdqKm0pFc8OV7JqPBGhs4uvp6=VhEU2emV6w@mail.gmail.com>

Mike Hearn, why don't we just have all nodes report attempted double spends
through the node network. No need to involve the miners at all really, or
do your suggestion but also report the double spend attempt. By waiting
maybe 10-60 seconds (instead of 10 minutes for first conf), merchants can
be more sure that a double spend attack was not tried. Attacker would have
to hold back second tx by 10-60 seconds and hope that that second tx (with
higher fee) get's into a solved block before the first one. This forced
delay time ought to make the attack less successful (but not impossible).

Paul G.


On Mon, Jun 16, 2014 at 11:09 AM, Daniel Rice <drice at greenmangosystems.com>
wrote:

> If you're hoping the instant providers list won't need to scale then
> you're essentially saying that we need a solution to the double spend
> problem. That is a good point. Double spends are one of the biggest issues
> remaining in the protocol. I've seen so many people talk about bad
> experiences trying to spend Bitcoin at a restaurant and waiting an hour for
> confirmations. This entire BIP extension is a band aid for double spends.
> If double spends are not resolved, there will be a million instant
> providers in the long run and if double spends are resolved then this BIP
> extension is completely unnecessary. Is solving doublespends off the table?
>
> What if we solved doublespends like this: If a node receives 2
> transactions that use the same input, they can put both of them into the
> new block as a proof of double spend, but the bitcoins are not sent to the
> outputs of either transactions. They are instead treated like a fee and
> given to the block solver node. This gives miners the needed incentive and
> tools to end doublespends instead of being forced to favor one transaction
> over the other.
>
> I will write up a BIP if this seems like a practical approach.
>
>
> On Mon, Jun 16, 2014 at 5:19 AM, Mike Hearn <mike at plan99.net> wrote:
>
>> Looking good! I think this is much better than the original draft. Agree
>> with Andreas that supports_instant is simply equal to
>> (supported_instant_providers.size() > 1) which makes it redundant.
>>
>> Daniel is right that putting every possible provider in the Payment
>> message might not scale in a world where there are huge numbers of
>> instant-confirmation providers, but I'm hoping that we never have to scale
>> to that size, because if we did that'd rather imply that Bitcoin has become
>> useless for in-person payments without trusted third parties and avoiding
>> that is rather the whole point of the project :) So I'm OK with some
>> theoretical lack of scalability for now.
>>
>> A more scalable approach would be for the user to send the name and
>> signature of their "instant provider" every time and the merchant just
>> chooses whether to ignore it or not, but as Lawrence points out, this is
>> incompatible with the provider charging extra fees for "instantness". But
>> should we care? I'm trying to imagine what the purchasing experience is
>> like with optional paid-for third party anti-double-spend protection.
>> Ultimately it's the merchant who cares about this, not me, so why would I
>> ever pay? It makes no sense for me to pay for double spend protection for
>> the merchant: after all, I'm honest. This is why it doesn't make sense for
>> me to pay miners fees either, it's the *receiver* who cares about
>> confirmations, not the sender.
>>
>> So I wonder if a smarter design is that the user always submits the
>> details of their instantness provider and we just don't allow for optional
>> selection of instantness. I'm not sure that works, UX wise, so is having a
>> less scalable design to support it worthwhile?
>>
>>
>> ------------------------------------------------------------------------------
>> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
>> Find What Matters Most in Your Big Data with HPCC Systems
>> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
>> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
>> http://p.sf.net/sfu/hpccsystems
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> ------------------------------------------------------------------------------
> HPCC Systems Open Source Big Data Platform from LexisNexis Risk Solutions
> Find What Matters Most in Your Big Data with HPCC Systems
> Open Source. Fast. Scalable. Simple. Ideal for Dirty Data.
> Leverages Graph Analysis for Fast Processing & Easy Data Exploration
> http://p.sf.net/sfu/hpccsystems
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140616/80d79193/attachment.html>
