From: gmaxwell@gmail.com (Gregory Maxwell)
Date: Fri, 6 Feb 2015 18:21:09 +0000
Subject: [Bitcoin-development] determining change addresses using the
 least significant digits
In-Reply-To: <20150204142323.DEC4BE2DCDE@quidecco.de>
References: <20150204142323.DEC4BE2DCDE@quidecco.de>
Message-ID: <CAAS2fgQyecwuiXxYxzF4bmYCVvcQnBa97LYXYu-Gf3rVNs5VJw@mail.gmail.com>

On Wed, Feb 4, 2015 at 2:23 PM, Isidor Zeuner
<cryptocurrencies at quidecco.de> wrote:
> Hi there,
>
> traditionally, the Bitcoin client strives to hide which output
> addresses are change addresses going back to the payer. However,
> especially with today's dynamically calculated miner fees, this
> may often be ineffective:
>
> A user sending a payment using the Bitcoin client will usually enter
> the payment amount only up to the number of digits which are
> considered to be significant enough. So, the least significant digits
> will often be zero for the payment. With dynamically calculated miner
> fees, this will often not be the case for the change amount, making it
> easy for an observer to classify the output addresses.
>
> A possible approach to handle this issue would be to add a randomized
> offset amount to the payment amount. This offset amount can be small
> in comparison to the payment amount.

Sending someone too much can really play hell with their accounting.
Unless you know they're okay with it, I wouldn't suggest it.

I often randomly round up the output when I'm paying to a depository
account... and I've thought that would be a useful feature to have,
but I dunno how to usefully present a UI for "pay at least X but
you're allowed to round-up up to 0.01 BTC more".


Another strategy is this: create two change outputs, with uniform
probablity make one equal to your payment amount (which is also nice
because if your payment amount models future payment amount the change
will be usefully sized) or split your change evenly.


