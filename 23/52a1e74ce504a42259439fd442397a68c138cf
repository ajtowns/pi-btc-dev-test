From: gmaxwell@gmail.com (Gregory Maxwell)
Date: Tue, 14 Oct 2014 02:45:47 +0000
Subject: [Bitcoin-development] Malleable booleans
In-Reply-To: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
References: <CAPg+sBjbeAaTmEvqrHHU4Mb45VPyRvFxdRzz1S6+-t7ep20ZtQ@mail.gmail.com>
Message-ID: <CAAS2fgQXGkYgxuzDaYUr-p6Z6J0sPBGt-qg4HVMDcs3owf+90w@mail.gmail.com>

On Tue, Oct 14, 2014 at 2:34 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:
> Hi all,
>
> while working on a BIP62 implementation I discovered yet another type
> of malleability: the interpretation of booleans.
>
> Any byte array with non-zero bytes in it (ignoring the highest bit of
> the last byte, which is the sign bit when interpreting as a number) is
> interpreted as true, anything else as false. Other than numbers,
> they're not even restricted to 4 bytes. Worse, the code for dealing
> with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first
> interpret their arguments as numbers, and then compare them to 0 to
> turn them into boolean values.
>
> This means that scripts that use booleans as inputs will be inherently
> malleable. Given that that seems actually useful (passing in booleans
> to guide some OP_IF's during execution of several alternatives), I
> would like to change BIP62 to also state that interpreted booleans
> must be of minimal encoded size (in addition to numbers).
>
> Any opinions for or against?


An argument against is that you can currently do something like this:


OP_DUP OP_IF OP_HASH160 PUSH OP_EQUALVERIFY OP_ELSE  <stuff>
OP_CHECKSIGVERIFY OP_ENDIF

E.g. if your input is non-zero you're giving a hash, if it's zero
you're skipping that and running another branch.

Of course you could just encode your script another way... but by that
same logic you can 1 OP_QUALVERIFY to bool-ize any input in the true
path.  The inconsistency in handling makes it more likely that script
authors will screw up with bad (for them) consequences, however.

[I just asked pieter out of band to clarify if he means "minimal
encoded size", or must be 0 or 1 minimally encoded... as the former
doesn't fix the malleability, but the later is more disruptive]


