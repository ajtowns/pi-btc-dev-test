From: jtimonmv@gmail.com (=?ISO-8859-1?B?CUpvcmdlIFRpbfNu?=)
Date: Wed, 13 Mar 2013 10:20:17 +0100
Subject: [Bitcoin-development] Blocking uneconomical UTXO creation
In-Reply-To: <CADb9v0JMy8_rWfU3j-g74cbh_1wAdCa5Ce+PkzGadbZL+OV4VQ@mail.gmail.com>
References: <20130310043155.GA20020@savin> <20130312074945.GB25250@savin>
	<CADb9v0JMy8_rWfU3j-g74cbh_1wAdCa5Ce+PkzGadbZL+OV4VQ@mail.gmail.com>
Message-ID: <CABOyFfrPTYeq-g5tgte2HWfvBiBcRLw_Bvyk_X2hXMWVoW3dgQ@mail.gmail.com>

I'm not sure I understand your proposal, but its sounds good.
Can you elaborate with an example?
Are you considering colored coins/smart property?


On 3/13/13, Stephen Pair <stephen at bitpay.com> wrote:
> Instead of thinking in terms of blocking uneconomical transactions (how
> would a node even determine what's economical?), what about thinking in
> terms of paying for a feed of economical (i.e. profitable) transactions?
> There is a market for fee bearing, profitable transactions...if there is no
> one willing to pay to receive a transaction, then no one will bother
> propagating it.  Such a system would make it possible to determine the
> probability of confirmation in a given timeframe for a given fee.
>
>
> On Tue, Mar 12, 2013 at 3:49 AM, Peter Todd <pete at petertodd.org> wrote:
>
>> On Sat, Mar 09, 2013 at 11:31:55PM -0500, Peter Todd wrote:
>> > As discussed endlessly data in the UTXO set is more costly, especially
>> > in the long run, than transaction data itself. The fee system is per KB
>> > in a block, and thus doesn't properly capture the long-term costs of
>> > UTXO creation.
>>
>> There's been a lot of discussion about this issue, and many people have
>> asked that Bitcoin not arbitrarily block interesting potential uses of
>> provably unspendable txouts for data applications, and similarly
>> spendable txouts representing assets. I've changed my hardline position
>> and now think we should support all that stuff. However, there is one
>> remaining class of txout not yet talked about, unspendable but not
>> provably so txouts. For instance we could make the following a standard
>> transaction type:
>>
>> scriptPubKey: OP_HASH160 <20 byte digest> OP_EQUALVERIFY <data>
>> scriptSig: <data>
>>
>> Of course, usually the 20 byte digest would be picked randomly, but it
>> might not be, and thus all validating nodes will always have a copy of
>> the data. With the 10KB limit on script sizes you can fit 9974 bytes of
>> data per transaction output with very little waste.
>>
>> A good application is timestamping, with the advantage over
>> coinbase/merkle tree systems in that you don't have to wait until your
>> timestamp confirms, or even store the timestamp at all. Another
>> application, quite possible with large block sizes and hence cheap or
>> free transactions, is secure data backups. In particular such a service,
>> perhaps called Google Chain Storage, can offer the unique guarantee that
>> you can know you're data is secure by simply performing a successful
>> Bitcoin transaction.
>>
>> --
>> 'peter'[:-1]@petertodd.org
>>
>>
>> ------------------------------------------------------------------------------
>> Symantec Endpoint Protection 12 positioned as A LEADER in The Forrester
>> Wave(TM): Endpoint Security, Q1 2013 and "remains a good choice" in the
>> endpoint security space. For insight on selecting the right partner to
>> tackle endpoint security challenges, access the full report.
>> http://p.sf.net/sfu/symantec-dev2dev
>> _______________________________________________
>> Bitcoin-development mailing list
>> Bitcoin-development at lists.sourceforge.net
>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>>
>>
>
>
> --
> Stephen Pair, Co-Founder, CTO
>
> Does *your* website accept cash? bitpay.com
>
> [image: bitpay-small]
>
> ABC6 C11B BF75 9E2B FC6A  B3E0 7B96 40B2 CAC0 C158
>


-- 
Jorge Tim?n

http://freico.in/
http://archive.ripple-project.org/


