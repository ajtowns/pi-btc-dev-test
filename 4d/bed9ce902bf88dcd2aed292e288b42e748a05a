From: pieter.wuille@gmail.com (Pieter Wuille)
Date: Mon, 3 Dec 2012 21:44:40 +0100
Subject: [Bitcoin-development] BIP 32 HD wallets,
 accounts should be labels not numbers
In-Reply-To: <1354546114.71509.YahooMailNeo@web121006.mail.ne1.yahoo.com>
References: <1354542572.51243.YahooMailNeo@web121001.mail.ne1.yahoo.com>
	<CAPg+sBgU=1Z1KaGXk0xY1mzEZKVRPd7T06X_zcTUd_d4JUsWtw@mail.gmail.com>
	<1354546114.71509.YahooMailNeo@web121006.mail.ne1.yahoo.com>
Message-ID: <20121203204438.GA30654@vps7135.xlshosting.net>

On Mon, Dec 03, 2012 at 06:48:34AM -0800, Amir Taaki wrote:
> ok, also what is the reasoning behind serialising points using a compressed
> format before going into the hash function? I'm looking at the sec1-v2.pdf
> and the compression format is a little confusing.

I don't think there is a compelling reason to encourage uncompressed public
keys anymore on the network. They take more space in the block chain for no
additional value whatsoever. Software may of course continue supporting
uncompressed keys if they wish to provide compatibility, but for a new
standard, I think it makes sense to standardize on just compressed keys.
And since that software thus needs to support the compressed encoding,
there is no reason to use a different encoding inside the derivation scheme
itself.

Regarding the encoding itself, it is not hard: just 0x02 or 0x03 (depending
on whether Y is even or odd) followed by the 32-byte encoding of X. Decoding
is harder, but is never needed in the derivation. Software internally can use
any representation (and it will), which in almost all circumstances stores
both X and Y (and even more). Decoding compressed public keys is somewhat
harder, as Y must be reconstructed (but the algorithm isn't hard) - this is
only necessary when someone wants to import an extended public key though for
watch-only wallets.

-- 
Pieter


