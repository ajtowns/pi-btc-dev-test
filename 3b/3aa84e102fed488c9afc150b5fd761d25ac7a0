From: gmaxwell@gmail.com (Gregory Maxwell)
Date: Fri, 28 Nov 2014 12:03:52 +0000
Subject: [Bitcoin-development] BIP 65 and OP_CHECKLOCKTIMEVERIFY
	inquiry...
In-Reply-To: <CABbpET_VLEZ5W+gTJWYXhafTDWd-dqj79iXjPFkARwV0K3CJTg@mail.gmail.com>
References: <63C13C3D-5333-4DEA-A42F-A4685DDE09DA@ricmoo.com>
	<CAAS2fgSr7-s-Bg-6Fjs1=dg0WR4JZfWbx2hnSyU4iXRNKHma4Q@mail.gmail.com>
	<3A394B8C-FD24-4134-A8B8-CCAF63ECB5B0@petertodd.org>
	<CABbpET_VLEZ5W+gTJWYXhafTDWd-dqj79iXjPFkARwV0K3CJTg@mail.gmail.com>
Message-ID: <CAAS2fgSeMqS9-jkqMR=hH5cLLne_u3iJDig3cTZfnnnZeuf_sQ@mail.gmail.com>

On Fri, Nov 28, 2014 at 11:45 AM, Flavien Charlon
<flavien.charlon at coinprism.com> wrote:
>> This breaks existing invariants and would make the coins potentially less
>> fungible because they wouldn't be reorg safe.
>
> I'm not sure coins are ever reorg safe. All it takes is a double spend in
> the history of your coins for them to become invalid after a reorg. Because
> of that, there are already less fungible coins. This is why we recommend 6
> confirmations for important payments.

I used the word 'less' intentionally.   A double spend requires an
active action. Roughly 1% of blocks are lost to reorganizations by
chance, longer otherwise harmless reorgs as we've had in the past
could forever destroy large chunks of coins if descendants had the
unwelcome properties of having additional constraints on them. Past
instances where the network had a dozen block reorganization which
were harmless and simply confirmed the same transactions likely would
have caused substantial losses if it reorganizations precluded the
recovery of many transactions which were valid when placed earlier in
the chain.

Additionally your '6 confirmations' is a uniform rule. The
recommendation is just a count, it's tidy.  It's not a "traverse the
recent history of each coin you receive to determine if its script
conditions make it unusually fragile and subject to irrecoverable
loss", which is the space you can get into with layering violations
and transaction validity depending on arbitrary block data.


