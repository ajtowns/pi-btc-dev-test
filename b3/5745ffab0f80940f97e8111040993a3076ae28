From: jgarzik@exmulti.com (Jeff Garzik)
Date: Wed, 15 Jun 2011 02:06:26 -0400
Subject: [Bitcoin-development] Protocol versioning
Message-ID: <BANLkTi=4UeK2D0cCHYGp1tHUTGA2iyWHcA@mail.gmail.com>

This issue has been simmering for a while...

I agree with the following general principles, and it sounds like
others on the forums do too:

GP1) Alternative implementations of a protocol are beneficial to the ecosystem.

GP2) Tying together protocol and client version is sub-optimal, and
undesirable long term.

The current, coarse-grained scheme was clearly preferred by satoshi.
He knew what a chore creating a fully compliant client would be, and
when I joined (July 2010), was actively discouraging alternative
client efforts.  Also, tying protocol and client version together
certainly eased the deployment of changes.

Protocol development has clearly slowed, and we have at least one
major alternative client in the works (bitcoinj), so it seems fair to
revisit those assumptions and preferences.

Here are several mini-proposals for the Satoshi Client (anyone got a
better nickname?) along these lines, which should better prepare the
bitcoin protocol for the long term:

MP1) Avoid creating four-component version numbers (W.X.Y.Z), and use
pszSubVer as a client identification string.  This proposal originally
came from Mike Hearn, IIRC.

MP2) remove IP transactions in v0.4

MP3) create constants for protocol version, and audit code to split
client version from protocol version.  This is a THORNY patch, and far
more difficult than https://github.com/bitcoin/bitcoin/pull/63
implies.  The code has various data structures and such versioned, so
it is difficult to pick out at quick glance which 'version' is which.

MP4) split protocol and client versions in v0.4 -- though you will not
actually notice a change until v0.4.1, when the client version changes
but the protocol version does not.

MP5) Use a single bit inside 'nServices' to indicate the presence of
an optional "capabilities" message.  The purpose of this is to enable
minor protocol changes without having to change the protocol version.
Thus, nodes may advertise /features/ rather than simply "I support all
features >= version X".  Most mature protocols support this sort of
thing, rather than the simpler, coarse-grained version number system.

-- 
Jeff Garzik
exMULTI, Inc.
jgarzik at exmulti.com


