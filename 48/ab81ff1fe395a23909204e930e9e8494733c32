From: pieter.wuille@gmail.com (Pieter Wuille)
Date: Sun, 1 Feb 2015 11:00:39 -0400
Subject: [Bitcoin-development] var_int ambiguous serialization
	consequences
In-Reply-To: <D89EBAA3-ED78-4D9C-B693-FBBF27501938@bitsofproof.com>
References: <D89EBAA3-ED78-4D9C-B693-FBBF27501938@bitsofproof.com>
Message-ID: <CAPg+sBhmB9tZkOVdUstRYd4DAhNpFoirK-p7-yxVarbQzTqCkQ@mail.gmail.com>

Hashes are always computed by reserializing data structures, never by
hashing wire data directly. This has been the case in every version of the
reference client's code that I know of.

This even meant that for example a block of 999999 bytes with non-shortest
length for the transaction count could be over the mazimum block size, but
still be valid.

As Wladimir says, more recently we switched to just failing to deserialize
(by throwing an exception) whenever a non-shortest form is used.
On Feb 1, 2015 1:34 AM, "Tamas Blummer" <tamas at bitsofproof.com> wrote:

> I wonder of consequences if var_int is used in its longer than necessary
> forms (e.g encoding 1 as 0xfd0100 instead of 0x01)
>
> This is already of interest if applying size limit to a block, since
> transaction count is var_int but is not part of the hashed header or the
> merkle tree.
>
> It could also be used to create variants of the same transaction message
> by altered representation of txIn and txout counts, that would remain valid
> provided signatures validate with the shortest form, as that is created
> while re-serializing for signature hashing. An implementation that holds
> mempool by raw message hashes could be tricked to believe that a modified
> encoded version of the same transaction is a real double spend. One could
> also mine a valid block with transactions that have a different hash if
> regularly parsed and re-serialized. An SPV client could be confused by such
> a transaction as it was present in the merkle tree proof with a different
> hash than it gets for the tx with its own serialization or from the raw
> message.
>
> Tamas Blummer
> Bits of Proof
>
>
>
> ------------------------------------------------------------------------------
> Dive into the World of Parallel Programming. The Go Parallel Website,
> sponsored by Intel and developed in partnership with Slashdot Media, is
> your
> hub for all things parallel software development, from weekly thought
> leadership blogs to news, videos, case studies, tutorials and more. Take a
> look and join the conversation now. http://goparallel.sourceforge.net/
> _______________________________________________
> Bitcoin-development mailing list
> Bitcoin-development at lists.sourceforge.net
> https://lists.sourceforge.net/lists/listinfo/bitcoin-development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/f217c6d5/attachment.html>
